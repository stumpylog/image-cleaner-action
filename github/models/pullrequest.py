# generated by datamodel-codegen:
#   filename:  pull-request.json
#   timestamp: 2025-10-02T16:55:26+00:00

from __future__ import annotations

from typing import Literal
from typing import NotRequired
from typing import TypedDict


class User(TypedDict):
    """
    A GitHub user.
    """

    name: NotRequired[str | None]
    email: NotRequired[str | None]
    login: str
    id: int
    node_id: str
    avatar_url: str
    gravatar_id: str | None
    url: str
    html_url: str
    followers_url: str
    following_url: str
    gists_url: str
    starred_url: str
    subscriptions_url: str
    organizations_url: str
    repos_url: str
    events_url: str
    received_events_url: str
    type: str
    site_admin: bool
    starred_at: NotRequired[str]
    user_view_type: NotRequired[str]


class Label(TypedDict):
    id: int
    node_id: str
    url: str
    name: str
    description: str
    color: str
    default: bool


class Creator(TypedDict):
    """
    A GitHub user.
    """

    name: NotRequired[str | None]
    email: NotRequired[str | None]
    login: str
    id: int
    node_id: str
    avatar_url: str
    gravatar_id: str | None
    url: str
    html_url: str
    followers_url: str
    following_url: str
    gists_url: str
    starred_url: str
    subscriptions_url: str
    organizations_url: str
    repos_url: str
    events_url: str
    received_events_url: str
    type: str
    site_admin: bool
    starred_at: NotRequired[str]
    user_view_type: NotRequired[str]


class Milestone(TypedDict):
    """
    A collection of related issues and pull requests.
    """

    url: str
    html_url: str
    labels_url: str
    id: int
    node_id: str
    number: int
    """
    The number of the milestone.
    """
    state: Literal["open", "closed"]
    """
    The state of the milestone.
    """
    title: str
    """
    The title of the milestone.
    """
    description: str | None
    creator: Creator | None
    open_issues: int
    closed_issues: int
    created_at: str
    updated_at: str
    closed_at: str | None
    due_on: str | None


class Assignee(TypedDict):
    """
    A GitHub user.
    """

    name: NotRequired[str | None]
    email: NotRequired[str | None]
    login: str
    id: int
    node_id: str
    avatar_url: str
    gravatar_id: str | None
    url: str
    html_url: str
    followers_url: str
    following_url: str
    gists_url: str
    starred_url: str
    subscriptions_url: str
    organizations_url: str
    repos_url: str
    events_url: str
    received_events_url: str
    type: str
    site_admin: bool
    starred_at: NotRequired[str]
    user_view_type: NotRequired[str]


class RequestedReviewer(TypedDict):
    """
    A GitHub user.
    """

    name: NotRequired[str | None]
    email: NotRequired[str | None]
    login: str
    id: int
    node_id: str
    avatar_url: str
    gravatar_id: str | None
    url: str
    html_url: str
    followers_url: str
    following_url: str
    gists_url: str
    starred_url: str
    subscriptions_url: str
    organizations_url: str
    repos_url: str
    events_url: str
    received_events_url: str
    type: str
    site_admin: bool
    starred_at: NotRequired[str]
    user_view_type: NotRequired[str]


class Permissions(TypedDict):
    pull: bool
    triage: bool
    push: bool
    maintain: bool
    admin: bool


class Parent(TypedDict):
    """
    Groups of organization members that gives permissions on specified repositories.
    """

    id: int
    """
    Unique identifier of the team
    """
    node_id: str
    url: str
    """
    URL for the team
    """
    members_url: str
    name: str
    """
    Name of the team
    """
    description: str | None
    """
    Description of the team
    """
    permission: str
    """
    Permission that the team will have for its repositories
    """
    privacy: NotRequired[str]
    """
    The level of privacy this team should have
    """
    notification_setting: NotRequired[str]
    """
    The notification setting the team has set
    """
    html_url: str
    repositories_url: str
    slug: str
    ldap_dn: NotRequired[str]
    """
    Distinguished Name (DN) that team maps to within LDAP environment
    """
    type: Literal["enterprise", "organization"]
    """
    The ownership type of the team
    """
    organization_id: NotRequired[int]
    """
    Unique identifier of the organization to which this team belongs
    """
    enterprise_id: NotRequired[int]
    """
    Unique identifier of the enterprise to which this team belongs
    """


class RequestedTeam(TypedDict):
    """
    Groups of organization members that gives permissions on specified repositories.
    """

    id: int
    node_id: str
    name: str
    slug: str
    description: str | None
    privacy: NotRequired[str]
    notification_setting: NotRequired[str]
    permission: str
    permissions: NotRequired[Permissions]
    url: str
    html_url: str
    members_url: str
    repositories_url: str
    type: Literal["enterprise", "organization"]
    """
    The ownership type of the team
    """
    organization_id: NotRequired[int]
    """
    Unique identifier of the organization to which this team belongs
    """
    enterprise_id: NotRequired[int]
    """
    Unique identifier of the enterprise to which this team belongs
    """
    parent: Parent | None


class License(TypedDict):
    """
    License Simple
    """

    key: str
    name: str
    url: str | None
    spdx_id: str | None
    node_id: str
    html_url: NotRequired[str]


class Permissions1(TypedDict):
    admin: bool
    pull: bool
    triage: NotRequired[bool]
    push: bool
    maintain: NotRequired[bool]


class Owner(TypedDict):
    """
    A GitHub user.
    """

    name: NotRequired[str | None]
    email: NotRequired[str | None]
    login: str
    id: int
    node_id: str
    avatar_url: str
    gravatar_id: str | None
    url: str
    html_url: str
    followers_url: str
    following_url: str
    gists_url: str
    starred_url: str
    subscriptions_url: str
    organizations_url: str
    repos_url: str
    events_url: str
    received_events_url: str
    type: str
    site_admin: bool
    starred_at: NotRequired[str]
    user_view_type: NotRequired[str]


class CodeSearchIndexStatus(TypedDict):
    """
    The status of the code search index for this repository
    """

    lexical_search_ok: NotRequired[bool]
    lexical_commit_sha: NotRequired[str]


class Repo(TypedDict):
    """
    A repository on GitHub.
    """

    id: int
    """
    Unique identifier of the repository
    """
    node_id: str
    name: str
    """
    The name of the repository.
    """
    full_name: str
    license: License | None
    forks: int
    permissions: NotRequired[Permissions1]
    owner: Owner
    """
    A GitHub user.
    """
    private: bool
    """
    Whether the repository is private or public.
    """
    html_url: str
    description: str | None
    fork: bool
    url: str
    archive_url: str
    assignees_url: str
    blobs_url: str
    branches_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    deployments_url: str
    downloads_url: str
    events_url: str
    forks_url: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: str
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    languages_url: str
    merges_url: str
    milestones_url: str
    notifications_url: str
    pulls_url: str
    releases_url: str
    ssh_url: str
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    tags_url: str
    teams_url: str
    trees_url: str
    clone_url: str
    mirror_url: str | None
    hooks_url: str
    svn_url: str
    homepage: str | None
    language: str | None
    forks_count: int
    stargazers_count: int
    watchers_count: int
    size: int
    """
    The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
    """
    default_branch: str
    """
    The default branch of the repository.
    """
    open_issues_count: int
    is_template: NotRequired[bool]
    """
    Whether this repository acts as a template that can be used to generate new repositories.
    """
    topics: NotRequired[list[str]]
    has_issues: bool
    """
    Whether issues are enabled.
    """
    has_projects: bool
    """
    Whether projects are enabled.
    """
    has_wiki: bool
    """
    Whether the wiki is enabled.
    """
    has_pages: bool
    has_downloads: bool
    """
    Whether downloads are enabled.
    """
    has_discussions: NotRequired[bool]
    """
    Whether discussions are enabled.
    """
    archived: bool
    """
    Whether the repository is archived.
    """
    disabled: bool
    """
    Returns whether or not this repository disabled.
    """
    visibility: NotRequired[str]
    """
    The repository visibility: public, private, or internal.
    """
    pushed_at: str | None
    created_at: str | None
    updated_at: str | None
    allow_rebase_merge: NotRequired[bool]
    """
    Whether to allow rebase merges for pull requests.
    """
    temp_clone_token: NotRequired[str]
    allow_squash_merge: NotRequired[bool]
    """
    Whether to allow squash merges for pull requests.
    """
    allow_auto_merge: NotRequired[bool]
    """
    Whether to allow Auto-merge to be used on pull requests.
    """
    delete_branch_on_merge: NotRequired[bool]
    """
    Whether to delete head branches when pull requests are merged
    """
    allow_update_branch: NotRequired[bool]
    """
    Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
    """
    use_squash_pr_title_as_default: NotRequired[bool]
    """
    Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
    """
    squash_merge_commit_title: NotRequired[Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]]
    """
    The default value for a squash merge commit title:

    - `PR_TITLE` - default to the pull request's title.
    - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
    """
    squash_merge_commit_message: NotRequired[Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]]
    """
    The default value for a squash merge commit message:

    - `PR_BODY` - default to the pull request's body.
    - `COMMIT_MESSAGES` - default to the branch's commit messages.
    - `BLANK` - default to a blank commit message.
    """
    merge_commit_title: NotRequired[Literal["PR_TITLE", "MERGE_MESSAGE"]]
    """
    The default value for a merge commit title.

    - `PR_TITLE` - default to the pull request's title.
    - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
    """
    merge_commit_message: NotRequired[Literal["PR_BODY", "PR_TITLE", "BLANK"]]
    """
    The default value for a merge commit message.

    - `PR_TITLE` - default to the pull request's title.
    - `PR_BODY` - default to the pull request's body.
    - `BLANK` - default to a blank commit message.
    """
    allow_merge_commit: NotRequired[bool]
    """
    Whether to allow merge commits for pull requests.
    """
    allow_forking: NotRequired[bool]
    """
    Whether to allow forking this repo
    """
    web_commit_signoff_required: NotRequired[bool]
    """
    Whether to require contributors to sign off on web-based commits
    """
    open_issues: int
    watchers: int
    master_branch: NotRequired[str]
    starred_at: NotRequired[str]
    anonymous_access_enabled: NotRequired[bool]
    """
    Whether anonymous git access is enabled for this repository
    """
    code_search_index_status: NotRequired[CodeSearchIndexStatus]
    """
    The status of the code search index for this repository
    """


class Head(TypedDict):
    label: str
    ref: str
    repo: Repo
    """
    A repository on GitHub.
    """
    sha: str
    user: User | None


class Repo1(TypedDict):
    """
    A repository on GitHub.
    """

    id: int
    """
    Unique identifier of the repository
    """
    node_id: str
    name: str
    """
    The name of the repository.
    """
    full_name: str
    license: License | None
    forks: int
    permissions: NotRequired[Permissions1]
    owner: Owner
    """
    A GitHub user.
    """
    private: bool
    """
    Whether the repository is private or public.
    """
    html_url: str
    description: str | None
    fork: bool
    url: str
    archive_url: str
    assignees_url: str
    blobs_url: str
    branches_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    deployments_url: str
    downloads_url: str
    events_url: str
    forks_url: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: str
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    languages_url: str
    merges_url: str
    milestones_url: str
    notifications_url: str
    pulls_url: str
    releases_url: str
    ssh_url: str
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    tags_url: str
    teams_url: str
    trees_url: str
    clone_url: str
    mirror_url: str | None
    hooks_url: str
    svn_url: str
    homepage: str | None
    language: str | None
    forks_count: int
    stargazers_count: int
    watchers_count: int
    size: int
    """
    The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
    """
    default_branch: str
    """
    The default branch of the repository.
    """
    open_issues_count: int
    is_template: NotRequired[bool]
    """
    Whether this repository acts as a template that can be used to generate new repositories.
    """
    topics: NotRequired[list[str]]
    has_issues: bool
    """
    Whether issues are enabled.
    """
    has_projects: bool
    """
    Whether projects are enabled.
    """
    has_wiki: bool
    """
    Whether the wiki is enabled.
    """
    has_pages: bool
    has_downloads: bool
    """
    Whether downloads are enabled.
    """
    has_discussions: NotRequired[bool]
    """
    Whether discussions are enabled.
    """
    archived: bool
    """
    Whether the repository is archived.
    """
    disabled: bool
    """
    Returns whether or not this repository disabled.
    """
    visibility: NotRequired[str]
    """
    The repository visibility: public, private, or internal.
    """
    pushed_at: str | None
    created_at: str | None
    updated_at: str | None
    allow_rebase_merge: NotRequired[bool]
    """
    Whether to allow rebase merges for pull requests.
    """
    temp_clone_token: NotRequired[str]
    allow_squash_merge: NotRequired[bool]
    """
    Whether to allow squash merges for pull requests.
    """
    allow_auto_merge: NotRequired[bool]
    """
    Whether to allow Auto-merge to be used on pull requests.
    """
    delete_branch_on_merge: NotRequired[bool]
    """
    Whether to delete head branches when pull requests are merged
    """
    allow_update_branch: NotRequired[bool]
    """
    Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
    """
    use_squash_pr_title_as_default: NotRequired[bool]
    """
    Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
    """
    squash_merge_commit_title: NotRequired[Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]]
    """
    The default value for a squash merge commit title:

    - `PR_TITLE` - default to the pull request's title.
    - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
    """
    squash_merge_commit_message: NotRequired[Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]]
    """
    The default value for a squash merge commit message:

    - `PR_BODY` - default to the pull request's body.
    - `COMMIT_MESSAGES` - default to the branch's commit messages.
    - `BLANK` - default to a blank commit message.
    """
    merge_commit_title: NotRequired[Literal["PR_TITLE", "MERGE_MESSAGE"]]
    """
    The default value for a merge commit title.

    - `PR_TITLE` - default to the pull request's title.
    - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
    """
    merge_commit_message: NotRequired[Literal["PR_BODY", "PR_TITLE", "BLANK"]]
    """
    The default value for a merge commit message.

    - `PR_TITLE` - default to the pull request's title.
    - `PR_BODY` - default to the pull request's body.
    - `BLANK` - default to a blank commit message.
    """
    allow_merge_commit: NotRequired[bool]
    """
    Whether to allow merge commits for pull requests.
    """
    allow_forking: NotRequired[bool]
    """
    Whether to allow forking this repo
    """
    web_commit_signoff_required: NotRequired[bool]
    """
    Whether to require contributors to sign off on web-based commits
    """
    open_issues: int
    watchers: int
    master_branch: NotRequired[str]
    starred_at: NotRequired[str]
    anonymous_access_enabled: NotRequired[bool]
    """
    Whether anonymous git access is enabled for this repository
    """
    code_search_index_status: NotRequired[CodeSearchIndexStatus]
    """
    The status of the code search index for this repository
    """


class Base(TypedDict):
    label: str
    ref: str
    repo: Repo1
    """
    A repository on GitHub.
    """
    sha: str
    user: User | None


class Comments(TypedDict):
    """
    Hypermedia Link
    """

    href: str


class Commits(TypedDict):
    """
    Hypermedia Link
    """

    href: str


class Statuses(TypedDict):
    """
    Hypermedia Link
    """

    href: str


class Html(TypedDict):
    """
    Hypermedia Link
    """

    href: str


class Issue(TypedDict):
    """
    Hypermedia Link
    """

    href: str


class ReviewComments(TypedDict):
    """
    Hypermedia Link
    """

    href: str


class ReviewComment(TypedDict):
    """
    Hypermedia Link
    """

    href: str


class Self(TypedDict):
    """
    Hypermedia Link
    """

    href: str


class FieldLinks(TypedDict):
    comments: Comments
    """
    Hypermedia Link
    """
    commits: Commits
    """
    Hypermedia Link
    """
    statuses: Statuses
    """
    Hypermedia Link
    """
    html: Html
    """
    Hypermedia Link
    """
    issue: Issue
    """
    Hypermedia Link
    """
    review_comments: ReviewComments
    """
    Hypermedia Link
    """
    review_comment: ReviewComment
    """
    Hypermedia Link
    """
    self: Self
    """
    Hypermedia Link
    """


class EnabledBy(TypedDict):
    """
    A GitHub user.
    """

    name: NotRequired[str | None]
    email: NotRequired[str | None]
    login: str
    id: int
    node_id: str
    avatar_url: str
    gravatar_id: str | None
    url: str
    html_url: str
    followers_url: str
    following_url: str
    gists_url: str
    starred_url: str
    subscriptions_url: str
    organizations_url: str
    repos_url: str
    events_url: str
    received_events_url: str
    type: str
    site_admin: bool
    starred_at: NotRequired[str]
    user_view_type: NotRequired[str]


class AutoMerge(TypedDict):
    """
    The status of auto merging a pull request.
    """

    enabled_by: EnabledBy
    """
    A GitHub user.
    """
    merge_method: Literal["merge", "squash", "rebase"]
    """
    The merge method to use.
    """
    commit_title: str
    """
    Title for the merge commit message.
    """
    commit_message: str
    """
    Commit message for the merge commit.
    """


class SimplePullRequest(TypedDict):
    """
    Pull Request Simple
    """

    url: str
    id: int
    node_id: str
    html_url: str
    diff_url: str
    patch_url: str
    issue_url: str
    commits_url: str
    review_comments_url: str
    review_comment_url: str
    comments_url: str
    statuses_url: str
    number: int
    state: str
    locked: bool
    title: str
    user: User | None
    body: str | None
    labels: list[Label]
    milestone: Milestone | None
    active_lock_reason: NotRequired[str | None]
    created_at: str
    updated_at: str
    closed_at: str | None
    merged_at: str | None
    merge_commit_sha: str | None
    assignee: Assignee | None
    assignees: NotRequired[list[Assignee]]
    requested_reviewers: NotRequired[list[RequestedReviewer]]
    requested_teams: NotRequired[list[RequestedTeam]]
    head: Head
    base: Base
    field_links: FieldLinks
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    """
    How the author is associated with the repository.
    """
    auto_merge: AutoMerge | None
    """
    The status of auto merging a pull request.
    """
    draft: NotRequired[bool]
    """
    Indicates whether or not the pull request is a draft.
    """
