# generated by datamodel-codegen:
#   filename:  branches.json
#   timestamp: 2025-10-02T16:46:23+00:00

from __future__ import annotations

from typing import Literal
from typing import NotRequired
from typing import TypedDict


class Commit(TypedDict):
    sha: str
    url: str


class Check(TypedDict):
    context: str
    app_id: int | None


class RequiredStatusChecks(TypedDict):
    """
    Protected Branch Required Status Check
    """

    url: NotRequired[str]
    enforcement_level: NotRequired[str]
    contexts: list[str]
    checks: list[Check]
    contexts_url: NotRequired[str]
    strict: NotRequired[bool]


class EnforceAdmins(TypedDict):
    """
    Protected Branch Admin Enforced
    """

    url: str
    enabled: bool


class User(TypedDict):
    """
    A GitHub user.
    """

    name: NotRequired[str | None]
    email: NotRequired[str | None]
    login: str
    id: int
    node_id: str
    avatar_url: str
    gravatar_id: str | None
    url: str
    html_url: str
    followers_url: str
    following_url: str
    gists_url: str
    starred_url: str
    subscriptions_url: str
    organizations_url: str
    repos_url: str
    events_url: str
    received_events_url: str
    type: str
    site_admin: bool
    starred_at: NotRequired[str]
    user_view_type: NotRequired[str]


class Permissions(TypedDict):
    pull: bool
    triage: bool
    push: bool
    maintain: bool
    admin: bool


class Parent(TypedDict):
    """
    Groups of organization members that gives permissions on specified repositories.
    """

    id: int
    """
    Unique identifier of the team
    """
    node_id: str
    url: str
    """
    URL for the team
    """
    members_url: str
    name: str
    """
    Name of the team
    """
    description: str | None
    """
    Description of the team
    """
    permission: str
    """
    Permission that the team will have for its repositories
    """
    privacy: NotRequired[str]
    """
    The level of privacy this team should have
    """
    notification_setting: NotRequired[str]
    """
    The notification setting the team has set
    """
    html_url: str
    repositories_url: str
    slug: str
    ldap_dn: NotRequired[str]
    """
    Distinguished Name (DN) that team maps to within LDAP environment
    """
    type: Literal["enterprise", "organization"]
    """
    The ownership type of the team
    """
    organization_id: NotRequired[int]
    """
    Unique identifier of the organization to which this team belongs
    """
    enterprise_id: NotRequired[int]
    """
    Unique identifier of the enterprise to which this team belongs
    """


class Team(TypedDict):
    """
    Groups of organization members that gives permissions on specified repositories.
    """

    id: int
    node_id: str
    name: str
    slug: str
    description: str | None
    privacy: NotRequired[str]
    notification_setting: NotRequired[str]
    permission: str
    permissions: NotRequired[Permissions]
    url: str
    html_url: str
    members_url: str
    repositories_url: str
    type: Literal["enterprise", "organization"]
    """
    The ownership type of the team
    """
    organization_id: NotRequired[int]
    """
    Unique identifier of the organization to which this team belongs
    """
    enterprise_id: NotRequired[int]
    """
    Unique identifier of the enterprise to which this team belongs
    """
    parent: Parent | None


class Owner(TypedDict):
    """
    A GitHub user.
    """

    name: NotRequired[str | None]
    email: NotRequired[str | None]
    login: str
    id: int
    node_id: str
    avatar_url: str
    gravatar_id: str | None
    url: str
    html_url: str
    followers_url: str
    following_url: str
    gists_url: str
    starred_url: str
    subscriptions_url: str
    organizations_url: str
    repos_url: str
    events_url: str
    received_events_url: str
    type: str
    site_admin: bool
    starred_at: NotRequired[str]
    user_view_type: NotRequired[str]


class Owner1(TypedDict):
    """
    An enterprise on GitHub.
    """

    description: NotRequired[str | None]
    """
    A short description of the enterprise.
    """
    html_url: str
    website_url: NotRequired[str | None]
    """
    The enterprise's website URL.
    """
    id: int
    """
    Unique identifier of the enterprise
    """
    node_id: str
    name: str
    """
    The name of the enterprise.
    """
    slug: str
    """
    The slug url identifier for the enterprise.
    """
    created_at: str | None
    updated_at: str | None
    avatar_url: str


class Permissions1(TypedDict):
    """
    The set of permissions for the GitHub app
    """

    issues: NotRequired[str]
    checks: NotRequired[str]
    metadata: NotRequired[str]
    contents: NotRequired[str]
    deployments: NotRequired[str]


class App(TypedDict):
    """
    GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
    """

    id: int
    """
    Unique identifier of the GitHub app
    """
    slug: NotRequired[str]
    """
    The slug name of the GitHub app
    """
    node_id: str
    client_id: NotRequired[str]
    owner: Owner | Owner1
    name: str
    """
    The name of the GitHub app
    """
    description: str | None
    external_url: str
    html_url: str
    created_at: str
    updated_at: str
    permissions: Permissions1
    """
    The set of permissions for the GitHub app
    """
    events: list[str]
    """
    The list of events for the GitHub app. Note that the `installation_target`, `security_advisory`, and `meta` events are not included because they are global events and not specific to an installation.
    """
    installations_count: NotRequired[int]
    """
    The number of installations associated with the GitHub app. Only returned when the integration is requesting details about itself.
    """


class DismissalRestrictions(TypedDict):
    users: NotRequired[list[User]]
    """
    The list of users with review dismissal access.
    """
    teams: NotRequired[list[Team]]
    """
    The list of teams with review dismissal access.
    """
    apps: NotRequired[list[App | None]]
    """
    The list of apps with review dismissal access.
    """
    url: NotRequired[str]
    users_url: NotRequired[str]
    teams_url: NotRequired[str]


class Permissions2(TypedDict):
    pull: bool
    triage: bool
    push: bool
    maintain: bool
    admin: bool


class Team1(TypedDict):
    """
    Groups of organization members that gives permissions on specified repositories.
    """

    id: int
    node_id: str
    name: str
    slug: str
    description: str | None
    privacy: NotRequired[str]
    notification_setting: NotRequired[str]
    permission: str
    permissions: NotRequired[Permissions2]
    url: str
    html_url: str
    members_url: str
    repositories_url: str
    type: Literal["enterprise", "organization"]
    """
    The ownership type of the team
    """
    organization_id: NotRequired[int]
    """
    Unique identifier of the organization to which this team belongs
    """
    enterprise_id: NotRequired[int]
    """
    Unique identifier of the enterprise to which this team belongs
    """
    parent: Parent | None


class Owner2(TypedDict):
    """
    A GitHub user.
    """

    name: NotRequired[str | None]
    email: NotRequired[str | None]
    login: str
    id: int
    node_id: str
    avatar_url: str
    gravatar_id: str | None
    url: str
    html_url: str
    followers_url: str
    following_url: str
    gists_url: str
    starred_url: str
    subscriptions_url: str
    organizations_url: str
    repos_url: str
    events_url: str
    received_events_url: str
    type: str
    site_admin: bool
    starred_at: NotRequired[str]
    user_view_type: NotRequired[str]


class Owner3(TypedDict):
    """
    An enterprise on GitHub.
    """

    description: NotRequired[str | None]
    """
    A short description of the enterprise.
    """
    html_url: str
    website_url: NotRequired[str | None]
    """
    The enterprise's website URL.
    """
    id: int
    """
    Unique identifier of the enterprise
    """
    node_id: str
    name: str
    """
    The name of the enterprise.
    """
    slug: str
    """
    The slug url identifier for the enterprise.
    """
    created_at: str | None
    updated_at: str | None
    avatar_url: str


class Permissions3(TypedDict):
    """
    The set of permissions for the GitHub app
    """

    issues: NotRequired[str]
    checks: NotRequired[str]
    metadata: NotRequired[str]
    contents: NotRequired[str]
    deployments: NotRequired[str]


class App1(TypedDict):
    """
    GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
    """

    id: int
    """
    Unique identifier of the GitHub app
    """
    slug: NotRequired[str]
    """
    The slug name of the GitHub app
    """
    node_id: str
    client_id: NotRequired[str]
    owner: Owner2 | Owner3
    name: str
    """
    The name of the GitHub app
    """
    description: str | None
    external_url: str
    html_url: str
    created_at: str
    updated_at: str
    permissions: Permissions3
    """
    The set of permissions for the GitHub app
    """
    events: list[str]
    """
    The list of events for the GitHub app. Note that the `installation_target`, `security_advisory`, and `meta` events are not included because they are global events and not specific to an installation.
    """
    installations_count: NotRequired[int]
    """
    The number of installations associated with the GitHub app. Only returned when the integration is requesting details about itself.
    """


class BypassPullRequestAllowances(TypedDict):
    """
    Allow specific users, teams, or apps to bypass pull request requirements.
    """

    users: NotRequired[list[User]]
    """
    The list of users allowed to bypass pull request requirements.
    """
    teams: NotRequired[list[Team1]]
    """
    The list of teams allowed to bypass pull request requirements.
    """
    apps: NotRequired[list[App1 | None]]
    """
    The list of apps allowed to bypass pull request requirements.
    """


class RequiredPullRequestReviews(TypedDict):
    """
    Protected Branch Pull Request Review
    """

    url: NotRequired[str]
    dismissal_restrictions: NotRequired[DismissalRestrictions]
    bypass_pull_request_allowances: NotRequired[BypassPullRequestAllowances]
    """
    Allow specific users, teams, or apps to bypass pull request requirements.
    """
    dismiss_stale_reviews: bool
    require_code_owner_reviews: bool
    required_approving_review_count: NotRequired[int]
    require_last_push_approval: NotRequired[bool]
    """
    Whether the most recent push must be approved by someone other than the person who pushed it.
    """


class User2(TypedDict):
    login: NotRequired[str]
    id: NotRequired[int]
    node_id: NotRequired[str]
    avatar_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    url: NotRequired[str]
    html_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    organizations_url: NotRequired[str]
    repos_url: NotRequired[str]
    events_url: NotRequired[str]
    received_events_url: NotRequired[str]
    type: NotRequired[str]
    site_admin: NotRequired[bool]
    user_view_type: NotRequired[str]


class Permissions4(TypedDict):
    pull: bool
    triage: bool
    push: bool
    maintain: bool
    admin: bool


class Team2(TypedDict):
    """
    Groups of organization members that gives permissions on specified repositories.
    """

    id: int
    node_id: str
    name: str
    slug: str
    description: str | None
    privacy: NotRequired[str]
    notification_setting: NotRequired[str]
    permission: str
    permissions: NotRequired[Permissions4]
    url: str
    html_url: str
    members_url: str
    repositories_url: str
    type: Literal["enterprise", "organization"]
    """
    The ownership type of the team
    """
    organization_id: NotRequired[int]
    """
    Unique identifier of the organization to which this team belongs
    """
    enterprise_id: NotRequired[int]
    """
    Unique identifier of the enterprise to which this team belongs
    """
    parent: Parent | None


class Owner4(TypedDict):
    login: NotRequired[str]
    id: NotRequired[int]
    node_id: NotRequired[str]
    url: NotRequired[str]
    repos_url: NotRequired[str]
    events_url: NotRequired[str]
    hooks_url: NotRequired[str]
    issues_url: NotRequired[str]
    members_url: NotRequired[str]
    public_members_url: NotRequired[str]
    avatar_url: NotRequired[str]
    description: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    type: NotRequired[str]
    site_admin: NotRequired[bool]
    user_view_type: NotRequired[str]


class Permissions5(TypedDict):
    metadata: NotRequired[str]
    contents: NotRequired[str]
    issues: NotRequired[str]
    single_file: NotRequired[str]


class App2(TypedDict):
    id: NotRequired[int]
    slug: NotRequired[str]
    node_id: NotRequired[str]
    owner: NotRequired[Owner4]
    name: NotRequired[str]
    client_id: NotRequired[str]
    description: NotRequired[str]
    external_url: NotRequired[str]
    html_url: NotRequired[str]
    created_at: NotRequired[str]
    updated_at: NotRequired[str]
    permissions: NotRequired[Permissions5]
    events: NotRequired[list[str]]


class Restrictions(TypedDict):
    """
    Branch Restriction Policy
    """

    url: str
    users_url: str
    teams_url: str
    apps_url: str
    users: list[User2]
    teams: list[Team2]
    apps: list[App2]


class RequiredLinearHistory(TypedDict):
    enabled: NotRequired[bool]


class AllowForcePushes(TypedDict):
    enabled: NotRequired[bool]


class AllowDeletions(TypedDict):
    enabled: NotRequired[bool]


class BlockCreations(TypedDict):
    enabled: NotRequired[bool]


class RequiredConversationResolution(TypedDict):
    enabled: NotRequired[bool]


class RequiredSignatures(TypedDict):
    url: str
    enabled: bool


class LockBranch(TypedDict):
    """
    Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
    """

    enabled: NotRequired[bool]


class AllowForkSyncing(TypedDict):
    """
    Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing.
    """

    enabled: NotRequired[bool]


class Protection(TypedDict):
    """
    Branch Protection
    """

    url: NotRequired[str]
    enabled: NotRequired[bool]
    required_status_checks: NotRequired[RequiredStatusChecks]
    """
    Protected Branch Required Status Check
    """
    enforce_admins: NotRequired[EnforceAdmins]
    """
    Protected Branch Admin Enforced
    """
    required_pull_request_reviews: NotRequired[RequiredPullRequestReviews]
    """
    Protected Branch Pull Request Review
    """
    restrictions: NotRequired[Restrictions]
    """
    Branch Restriction Policy
    """
    required_linear_history: NotRequired[RequiredLinearHistory]
    allow_force_pushes: NotRequired[AllowForcePushes]
    allow_deletions: NotRequired[AllowDeletions]
    block_creations: NotRequired[BlockCreations]
    required_conversation_resolution: NotRequired[RequiredConversationResolution]
    name: NotRequired[str]
    protection_url: NotRequired[str]
    required_signatures: NotRequired[RequiredSignatures]
    lock_branch: NotRequired[LockBranch]
    """
    Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
    """
    allow_fork_syncing: NotRequired[AllowForkSyncing]
    """
    Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing.
    """


class ShortBranch(TypedDict):
    """
    Short Branch
    """

    name: str
    commit: Commit
    protected: bool
    protection: NotRequired[Protection]
    """
    Branch Protection
    """
    protection_url: NotRequired[str]
